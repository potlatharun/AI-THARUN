import heapq
def uniform_cost_search(graph,start,goal):
    priority_queue = [(0, start, [])]
    visited = set()
    while priority_queue:
        cost, node, path = heapq.heappop(priority_queue)
        if node in visited:
            continue
        path = path + [node]
        visited.add(node)
        if node==goal:
            return cost, path
        for neighbor, edge_cost in graph.get(node, []):
            heapq.heappush(priority_queue, (cost + edge_cost, neighbor, path))
    return float('inf'), []
graph ={
        'A':[('B', 1), ('C', 2), ('H', 7)],
        'B':[('D', 4), ('E', 6)],
        'C':[('F', 3), ('G', 2)],
        'D':[('E', 7)],
        'E':[('H', 2)],
        'F':[('H', 1)],
        'G':[('H',2)]}
start_node = 'A'
goal_node = 'H'
cost, path = uniform_cost_search(graph, start_node, goal_node)
print(f"Least-cost path from {start_node} to {goal_node}:{path}")
print(f"Total Cost: {cost}")
