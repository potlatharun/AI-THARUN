class Node:
    def _init_(self, value=None, children=None):
        self.value = value
        self.children = children if children else []

def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or not node.children:
        return node.value

    if maximizing_player:
        max_value = float('-inf')
        for child in node.children:
            value = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_value = max(max_value, value)
            alpha = max(alpha, max_value)
            if beta <= alpha:
                break
        return max_value
    else:
        min_value = float('inf')
        for child in node.children:
            value = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_value = min(min_value, value)
            beta = min(beta, min_value)
            if beta <= alpha:
                break
        return min_value

# Example usage:
# Construct a tree manually

# Leaf nodes (depth 0)
leaf1 = Node(value=3)
leaf2 = Node(value=5)
leaf3 = Node(value=6)
leaf4 = Node(value=9)
leaf5 = Node(value=1)
leaf6 = Node(value=2)
leaf7 = Node(value=0)
leaf8 = Node(value=-1)

# Level 2
child1 = Node(children=[leaf1, leaf2])
child2 = Node(children=[leaf3, leaf4])
child3 = Node(children=[leaf5, leaf6])
child4 = Node(children=[leaf7, leaf8])

# Root node (Level 1)
root = Node(children=[child1, child2, child3, child4])

# Run alpha-beta pruning
optimal_value = alpha_beta_pruning(root, 3, float('-inf'), float('inf'), True)
print("The optimal value is:", optimal_value)
